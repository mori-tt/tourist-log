generator client {
  provider = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//ローカルでER図を作成する時のみコメントアウトを外す
//generator erd {
//  provider = "prisma-erd-generator"
//}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean   @default(false)
  isAdvertiser  Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isActive      Boolean   @default(false)
  walletAddress String?
  accounts      Account[]
  articles      Article[]
  sessions      Session[]
  topics        Topic[]
}

model Article {
  id           Int            @id @default(autoincrement())
  title        String
  content      String
  author       String
  isPurchased  Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  userId       String
  viewCount    Int            @default(0)
  topicId      Int?
  xymPrice     Float?         @default(0)
  xymTipAmount Float?         @default(0)
  purchasedBy  String?
  topic        Topic?         @relation(fields: [topicId], references: [id])
  user         User           @relation(fields: [userId], references: [id])
  images       ArticleImage[]
}

model ArticleImage {
  id        Int      @id @default(autoincrement())
  url       String
  articleId Int
  createdAt DateTime @default(now())
  article   Article  @relation(fields: [articleId], references: [id])
}

model Topic {
  id                 Int               @id @default(autoincrement())
  title              String
  content            String
  adFee              Float
  monthlyPVThreshold Int
  advertiserId       String
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  articles           Article[]
  monthlyPageViews   MonthlyPageView[]
  advertiser         User              @relation(fields: [advertiserId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Transaction {
  adFee           Float
  createdAt       DateTime        @default(now())
  transactionHash String
  type            TransactionType
  updatedAt       DateTime        @updatedAt
  id              Int             @id @default(autoincrement())
  topicId         Int
  isReceived      Boolean         @default(false)
  xymAmount       Float

  @@index([topicId])
}

model MonthlyPageView {
  id              Int       @id @default(autoincrement())
  topicId         Int
  year            Int
  month           Int
  pageViews       Int       @default(0)
  isConfirmed     Boolean   @default(false)
  isPaid          Boolean   @default(false)
  confirmedAt     DateTime?
  paidAt          DateTime?
  transactionHash String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  topic           Topic     @relation(fields: [topicId], references: [id])

  @@unique([topicId, year, month])
  @@index([topicId])
  @@index([year, month])
}

enum TransactionType {
  advertisement
  tip
  purchase
  receive_tip
}
