datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  walletAddress String?
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean   @default(false)
  isAdvertiser  Boolean   @default(false)
  isActive      Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  articles  Article[]
  topics    Topic[]
  accounts  Account[]
  sessions  Session[]
}


model Article {
  id             Int            @id @default(autoincrement())
  title          String
  content        String
  author         String
  tipAmount      Int?           @default(0)
  purchaseAmount Int?           @default(0)
  isPurchased    Boolean        @default(false)
  viewCount      Int            @default(0)
  topicId        Int?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  userId         String
  user           User           @relation(fields: [userId], references: [id])
  topic          Topic?         @relation(fields: [topicId], references: [id])
  
  images         ArticleImage[]
}

model ArticleImage {
  id        Int      @id @default(autoincrement())
  url       String
  article   Article  @relation(fields: [articleId], references: [id])
  articleId Int
  createdAt DateTime @default(now())
}

model Topic {
  id                 Int       @id @default(autoincrement())
  title              String
  content            String
  adFee              Float
  monthlyPVThreshold Int
  advertiserId       String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  advertiser User @relation(fields: [advertiserId], references: [id])
  // 逆方向のリレーションを追加する場合:
  articles   Article[]
}

model Account {
  id                  String  @id @default(cuid())
  userId              String
  type                String
  provider            String
  providerAccountId   String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  user                User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Transaction {
  id                Int             @id @default(autoincrement())
  topicId           Int
  adFee             Float
  transactionHash   String
  type              TransactionType
  isReceived        Boolean         @default(false)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@index([topicId])
}

enum TransactionType {
  advertisement
  tip
  purchase
  receive_tip
}